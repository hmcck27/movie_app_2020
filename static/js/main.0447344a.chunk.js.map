{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","components/Navigation.js","routes/Detail.js","App.js","index.js"],"names":["About","props","console","log","className","Movie","title","year","summary","poster","genres","to","pathname","state","src","alt","map","genre","index","key","slice","Home","isLoading","movies","getMovies","a","Axios","get","data","setState","this","id","medium_cover_image","React","Component","Navigation","fromNavigation","Detail","location","history","undefined","push","App","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"oUAgBeA,MAbf,SAAeC,GAGX,OADAC,QAAQC,IAAIF,GAER,yBAAKG,UAAU,oBACX,oIAGA,yD,gFC4BGC,MAlCf,YAAwD,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC1C,OACI,yBAAKN,UAAU,SACX,kBAAE,IAAF,CACIO,GAAI,CACAC,SAAU,eACVC,MAAO,CAAEN,OAAMD,QAAOE,UAASC,SAAQC,YAG/C,yBAAKI,IAAOL,EAAQM,IAAQT,EAAOA,MAAOA,IAC1C,yBAAKF,UAAU,eACX,wBAAIA,UAAU,gBAAgBE,GAC/B,wBAAIF,UAAU,eAAeG,GAC7B,wBAAIH,UAAU,gBAENM,EAAOM,KAAI,SAACC,EAAOC,GACf,OAAQ,wBAAIC,IAAKD,EAAOd,UAAU,eAAea,OAG7D,uBAAGb,UAAU,kBAAkBI,EAAQY,MAAM,EAAG,KAAhD,WCqLAC,G,kNAhMbR,MAAQ,CACNS,WAAW,EACXC,OAAQ,I,EAMVC,U,sBAAY,8BAAAC,EAAA,sEAKCC,IAAMC,IAAI,4DALX,gBAGCJ,EAHD,EAERK,KACEA,KAAOL,OAGX,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IANzB,2C,kEAHVQ,KAAKN,c,+BAYG,IAAD,EACuBM,KAAKjB,MAA3BS,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACA,6BAASnB,UAAU,aAChBkB,EACC,yBAAKlB,UAAU,UACb,0BAAMA,UAAU,gBAAhB,iBAGA,yBAAKA,UAAU,UACZmB,EAAOP,KAAI,SAAAO,GAAM,OAChB,kBAAC,EAAD,CACAJ,IAAOI,EAAOQ,GACdA,GAAKR,EAAOQ,GACZxB,KAAQgB,EAAOhB,KACfD,MAASiB,EAAOjB,MAChBE,QAAWe,EAAOf,QAClBC,OAAUc,EAAOS,mBACjBtB,OAAUa,EAAOb,kB,GArCZuB,IAAMC,Y,MCEVC,MATf,WACI,OACI,yBAAK/B,UAAU,OACX,kBAAC,IAAD,CAAMO,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAI,CAAEC,SAAU,SAAUC,MAAO,CAACuB,gBAAgB,KAAxD,WCaGC,E,kLAlBU,IAAD,EACcP,KAAK7B,MAA3BqC,EADQ,EACRA,SAAUC,EADF,EACEA,aACKC,IAAnBF,EAASzB,OACT0B,EAAQE,KAAK,O,+BAIX,IACEH,EAAaR,KAAK7B,MAAlBqC,SACR,OAAIA,EAASzB,MACF,8BAAOyB,EAASzB,MAAMP,OAGtB,S,GAdE2B,IAAMC,WC0KZQ,MA7Jf,WACE,OACA,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,gBAAgBC,UAAWP,IACvC,kBAAC,IAAD,CAAOM,KAAK,SAASC,UAAW5C,IAChC,kBAAC,IAAD,CAAO2C,KAAK,IAAIE,OAAO,EAAMD,UAAWvB,MCjB5CyB,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,W","file":"static/js/main.0447344a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './About.css'\r\n\r\nfunction About(props) {\r\n\r\n    console.log(props);\r\n    return (\r\n        <div className=\"about__container\">\r\n            <span>\r\n                \"Freedom is the freedom to say that two plus two make four. if that is granted, all else follows.\"\r\n            </span>\r\n            <span>- George Orwell, 1984</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Movie({title, year, summary, poster, genres}) {\r\n    return (\r\n        <div className=\"movie\">\r\n            < Link\r\n                to={{\r\n                    pathname: 'movie-detail',\r\n                    state: { year, title, summary, poster, genres },\r\n                }}\r\n            >\r\n            <img src = {poster} alt =  {title} title={title} />\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n               <h5 className=\"movie__year\">{year}</h5>\r\n               <ul className=\"movie_genres\">\r\n                   {\r\n                       genres.map((genre, index) => {\r\n                           return( <li key={index} className=\"movie_genre\">{genre}</li>);\r\n                       })\r\n                   }</ul>\r\n               <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n            </div>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster:  PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n\r\n// Movie component는 state가 필요없으니까 그냥 함수형 component로 작성\r\n\r\n","import React from 'react';\r\nimport Axios from 'axios';\r\nimport Movie from '../components/Movie';\r\nimport './Home.css';\r\n//import PropTypes from 'prop-types';\r\n\r\n// axios는 get을 통해서 API로부터 data를 받아온다.\r\n// componentDidMount()가 처음 render()이후로 실행되며, 이때 axios가 API로부터 data를 받아온다. \r\n// axios는 네트워크를 통해서 작동하기 때문에 느리게 작동한다. 이때 get()이 반환한 데이터를 잡으려면,\r\n// get()이 데이터를 다 잡을 때까지 기다려야 한다.\r\n// 이를 위해서는 async와 wait를 사용해야 한다. \r\nclass Home extends React.Component {\r\n\r\n  state = {\r\n    isLoading: true,\r\n    movies: []\r\n  };\r\n  componentDidMount() {\r\n    this.getMovies();\r\n  }\r\n\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: {movies},\r\n      },\r\n    } =  await Axios.get('https://yts-proxy.now.sh/list_movies.json&sort_by=rating');\r\n    this.setState({ movies, isLoading: false });\r\n  }\r\n\r\n  render() {   \r\n    const { isLoading, movies } = this.state;\r\n    return (\r\n    <section className=\"container\">\r\n      {isLoading ? (\r\n        <div className=\"loader\">\r\n          <span className=\"loader__text\">'Loading...'</span>\r\n        </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {movies.map(movies => (\r\n              <Movie \r\n              key = {movies.id}\r\n              id ={movies.id}\r\n              year = {movies.year}\r\n              title = {movies.title}\r\n              summary = {movies.summary}\r\n              poster = {movies.medium_cover_image}\r\n              genres = {movies.genres}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </ section>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/*****************class App 만들기와 생명주기 예제******************\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log('hello');\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('component rendered');\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log('I just updated');\r\n  }\r\n  state = {\r\n    count: 0,\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    console.log('Goodbye!');\r\n  }\r\n\r\n  add = () => {\r\n    this.setState(current => ({\r\n      count: current.count + 1,\r\n    }));\r\n  };\r\n\r\n  minus = () => {\r\n    this.setState(current => ({\r\n      count: current.count - 1,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    console.log(\"I`m rendering\");\r\n\r\n    return ( \r\n      <div>\r\n        <h1> This number is: {this.state.count} </h1>\r\n        <button onClick={this.add}>Add</button>\r\n        <button onClick={this.minus}>Minus</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// App class는 React.Component 를 extend를 통해서 상속받았다.\r\n// 이제 App class는 component니까 JSX를 반환해야 한다.\r\n// JSX를 반환하기 위해서 render함수를 사용한다.\r\n// 함수형 component는 return을 통해서 자동으로 JSX를 반환한다.\r\n// 리액트는 자동으로 render()함수를 실행한다.\r\n// state를 사용하기 위해서 class형 component를 사용한다. \r\n// state는 직접 변경하면 안된다. 리액트는 직접 변경하는 코드를 허용하지 않는다.\r\n// 원래 리액트는 state를 변경하면 render()함수를 다시 실행하여 변겨오딘 state를 화면에 출력한다.\r\n// 하지만 state를 직접 변경하는 경우에는 render()함수를 다시 실행하지 않는다.\r\n// 따라서 state를 변경하고 싶다면 setState()함수를 사용해야 한다.\r\n// setState()함수는 state를 변경하고 리액트는  setState()함수가 호출되면 자동으로 render()함수를 호출한다. 따라서 또 자동으로 화면이 갱신된다.  \r\n// constructor는 초기 render()함수 실행 이전에 실행된다. \r\n// componentDidMount()는 처음 render()이후에 실행된다.\r\n// constructor() -> render() -> componentDidMount()\r\n// 이후 setstate() -> render() -> componentDidUpdate() 순으로 반복된다. \r\n//********************************************************************** */\r\n\r\n\r\n/*\r\nfunction Potato() {\r\n  return <h1>I Love Potato!</h1>\r\n}\r\n\r\nfunction Food1(props) {\r\nreturn <h1>I Love {props.fav}</h1>\r\n}\r\n\r\n// 이 배열은 실제로는 DB에서 넘어왔다고 생각!\r\nconst foodILike = [\r\n  {\r\n    id : 1,\r\n    name: 'Kimchi',\r\n    image: 'https://www.koreanbapsang.com/wp-content/uploads/2016/10/DSC_1904-e1477366498840.jpg',\r\n    rating: 3,\r\n  },\r\n  {\r\n    id : 2,\r\n    name: 'ramen',\r\n    image: 'http://file.mk.co.kr/meet/neds/2017/09/image_readtop_2017_587233_15042337473013492.jpg',\r\n    rating: 2,\r\n  },\r\n  {\r\n    id : 3,\r\n    name: 'gogi',\r\n    image: 'https://s3-ap-northeast-1.amazonaws.com/dcreviewsresized/20170910011347_photo1_481363df942d.jpg',\r\n    rating: 1,\r\n  },\r\n];\r\n// 배열을 만들고, map함수를 통해서 각 배열의 원소마다 특정 함수를 취해줌.\r\n\r\n\r\n// 구조 분해 할당 방법으로 props받기\r\nfunction Food({name, picture, rating}) {\r\n  return (\r\n    <div> \r\n      <h2>I Like {name}</h2> \r\n      <h4> rating is {rating}</h4>\r\n      <img src={picture} alt = {name}/>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  return ( \r\n    <div>\r\n      <h1>Hello</h1>\r\n      {foodILike.map(dish => (<Food key = {dish.id} name = {dish.name} picture = {dish.image} rating = {dish.rating} />))} \r\n    </div>\r\n  )\r\n}\r\n\r\nFood.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  picture: PropTypes.string.isRequired,\r\n  rating: PropTypes.number,\r\n}\r\n\r\nfunction App1() {\r\n  console.log(foodILike.map(renderFood));\r\n  return ( \r\n    <div>\r\n      <h1>Hello</h1>\r\n      {foodILike.map(renderFood)} \r\n    </div>\r\n  )\r\n}\r\n\r\nfunction renderFood(dish) {\r\n  return <Food name = {dish.name} picture = {dish.image} />\r\n}\r\n\r\n*/\r\n// props를 이용해서 컴포넌트에 데이터를 보내는 방법 => fav = \"~~~\"\r\n\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './Navigation.css';\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <div className=\"nav\">\r\n            <Link to=\"/\">Home</Link>\r\n            <Link to={{ pathname: '/about', state: {fromNavigation: true }}}>About</Link>\r\n        </div>\r\n    );\r\n}\r\n// state는 route props에 넘겨줄 데이터\r\nexport default Navigation","import React from 'react';\r\n\r\nclass Detail extends React.Component {\r\n    componentDidMount() {\r\n        const { location, history } = this.props;\r\n        if (location.state === undefined) {\r\n            history.push('/');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { location } = this.props;\r\n        if (location.state) {\r\n            return <span>{location.state.title}</span>\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Detail;","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport './App.css';\nimport About from './routes/About';\nimport Home from './routes/Home';\nimport Navigation from './components/Navigation';\nimport Detail from './routes/Detail';\n//import PropTypes from 'prop-types';\n\n// axios는 get을 통해서 API로부터 data를 받아온다.\n// componentDidMount()가 처음 render()이후로 실행되며, 이때 axios가 API로부터 data를 받아온다. \n// axios는 네트워크를 통해서 작동하기 때문에 느리게 작동한다. 이때 get()이 반환한 데이터를 잡으려면,\n// get()이 데이터를 다 잡을 때까지 기다려야 한다.\n// 이를 위해서는 async와 wait를 사용해야 한다. \n\nfunction App() {\n  return( \n  <HashRouter>\n    <Navigation />\n    <Route path='/movie-detail' component={Detail}/>\n    <Route path='/about' component={About}/>\n    <Route path='/' exact={true} component={Home}/>\n  </HashRouter>\n  );\n}\n\n\n\n\n/*****************class App 만들기와 생명주기 예제******************\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    console.log('hello');\n  }\n\n  componentDidMount() {\n    console.log('component rendered');\n  }\n\n  componentDidUpdate() {\n    console.log('I just updated');\n  }\n  state = {\n    count: 0,\n  };\n\n  componentWillUnmount() {\n    console.log('Goodbye!');\n  }\n\n  add = () => {\n    this.setState(current => ({\n      count: current.count + 1,\n    }));\n  };\n\n  minus = () => {\n    this.setState(current => ({\n      count: current.count - 1,\n    }));\n  };\n\n  render() {\n    console.log(\"I`m rendering\");\n\n    return ( \n      <div>\n        <h1> This number is: {this.state.count} </h1>\n        <button onClick={this.add}>Add</button>\n        <button onClick={this.minus}>Minus</button>\n      </div>\n    );\n  }\n}\n// App class는 React.Component 를 extend를 통해서 상속받았다.\n// 이제 App class는 component니까 JSX를 반환해야 한다.\n// JSX를 반환하기 위해서 render함수를 사용한다.\n// 함수형 component는 return을 통해서 자동으로 JSX를 반환한다.\n// 리액트는 자동으로 render()함수를 실행한다.\n// state를 사용하기 위해서 class형 component를 사용한다. \n// state는 직접 변경하면 안된다. 리액트는 직접 변경하는 코드를 허용하지 않는다.\n// 원래 리액트는 state를 변경하면 render()함수를 다시 실행하여 변겨오딘 state를 화면에 출력한다.\n// 하지만 state를 직접 변경하는 경우에는 render()함수를 다시 실행하지 않는다.\n// 따라서 state를 변경하고 싶다면 setState()함수를 사용해야 한다.\n// setState()함수는 state를 변경하고 리액트는  setState()함수가 호출되면 자동으로 render()함수를 호출한다. 따라서 또 자동으로 화면이 갱신된다.  \n// constructor는 초기 render()함수 실행 이전에 실행된다. \n// componentDidMount()는 처음 render()이후에 실행된다.\n// constructor() -> render() -> componentDidMount()\n// 이후 setstate() -> render() -> componentDidUpdate() 순으로 반복된다. \n//********************************************************************** */\n\n\n/*\nfunction Potato() {\n  return <h1>I Love Potato!</h1>\n}\n\nfunction Food1(props) {\nreturn <h1>I Love {props.fav}</h1>\n}\n\n// 이 배열은 실제로는 DB에서 넘어왔다고 생각!\nconst foodILike = [\n  {\n    id : 1,\n    name: 'Kimchi',\n    image: 'https://www.koreanbapsang.com/wp-content/uploads/2016/10/DSC_1904-e1477366498840.jpg',\n    rating: 3,\n  },\n  {\n    id : 2,\n    name: 'ramen',\n    image: 'http://file.mk.co.kr/meet/neds/2017/09/image_readtop_2017_587233_15042337473013492.jpg',\n    rating: 2,\n  },\n  {\n    id : 3,\n    name: 'gogi',\n    image: 'https://s3-ap-northeast-1.amazonaws.com/dcreviewsresized/20170910011347_photo1_481363df942d.jpg',\n    rating: 1,\n  },\n];\n// 배열을 만들고, map함수를 통해서 각 배열의 원소마다 특정 함수를 취해줌.\n\n\n// 구조 분해 할당 방법으로 props받기\nfunction Food({name, picture, rating}) {\n  return (\n    <div> \n      <h2>I Like {name}</h2> \n      <h4> rating is {rating}</h4>\n      <img src={picture} alt = {name}/>\n\n    </div>\n  )\n}\n\nfunction App() {\n  return ( \n    <div>\n      <h1>Hello</h1>\n      {foodILike.map(dish => (<Food key = {dish.id} name = {dish.name} picture = {dish.image} rating = {dish.rating} />))} \n    </div>\n  )\n}\n\nFood.propTypes = {\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  rating: PropTypes.number,\n}\n\nfunction App1() {\n  console.log(foodILike.map(renderFood));\n  return ( \n    <div>\n      <h1>Hello</h1>\n      {foodILike.map(renderFood)} \n    </div>\n  )\n}\n\nfunction renderFood(dish) {\n  return <Food name = {dish.name} picture = {dish.image} />\n}\n\n*/\n// props를 이용해서 컴포넌트에 데이터를 보내는 방법 => fav = \"~~~\"\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')); // render함수의 첫번째 인자는 그릴 컴포넌트, 두번째 인자는 index.html의 위치"],"sourceRoot":""}